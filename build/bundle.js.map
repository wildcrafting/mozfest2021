{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/entities.js","src/index.js","src/search.js"],"names":[],"mappingsrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","var defaultMaterial = new THREE.MeshStandardMaterial({color: 0x331a00});\r\nvar radius = 3;\r\n\r\nAFRAME.registerComponent('card', {\r\n  schema: {\r\n    position: {default: {x: 0, y: 0, z:0}, type: 'vec3'},\r\n    index: {default: 0, type: 'number' }\r\n  },\r\n\r\n  init: function () {\r\n    var el = this.el;\r\n    var self = this;\r\n    // Create geometry.\r\n    this.geometry = new THREE.PlaneGeometry(.1, .2, 32)\r\n    this.material = new THREE.MeshStandardMaterial({color: 0xffffff, side: THREE.DoubleSide});\r\n\r\n    // Create mesh.\r\n    this.mesh = new THREE.Mesh(this.geometry);\r\n    el.setObject3D('mesh', this.mesh);\r\n    el.object3D.position.set(this.data.position.x +.005, this.data.position.y - .25, this.data.position.z);\r\n\r\n    // iNaturalist doesn't allow crossorigin = anonymous/CORS, so we can't use them as a texture\r\n    // https://stackoverflow.com/questions/34826748/issue-with-crossorigin-anonymous-failing-to-load-images\r\n    // https://hacks.mozilla.org/2011/11/using-cors-to-load-webgl-textures-from-cross-domain-images/\r\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#what_requests_use_cors\r\n    // if(observations[self.data.index].photos){\r\n    //   var schema = {src: observations[self.data.index].photos[0].url, softmode: true}\r\n    //   this.el.crossOrigin = 'anonymous';\r\n    //   this.el.setAttribute('asset-on-demand', schema)\r\n    // }\r\n\r\n    el.object3D.lookAt(0, 2, 0)\r\n    // this.el.object3D.rotation.y ;\r\n    el.addEventListener('mouseenter', function () {\r\n      el.object3D.scale.copy({x: 2.5, y: 2.5, z:2.5});\r\n    });\r\n    el.addEventListener('mouseleave', function () {\r\n      el.object3D.scale.copy({x: 1, y: 1, z:1});\r\n    });\r\n    this.el.addEventListener('click', function () {\r\n      displayObservationCard(self.data.index);\r\n      el.setAttribute('animation', 'property: position; to: 0 0 0');\r\n    });\r\n  }\r\n});\r\nAFRAME.registerComponent('trelis', {\r\n  schema: {\r\n    numArch: {type: 'number', default: 0}\r\n  },\r\n\r\n  init: function () {\r\n    const circleRadius = .005;\r\n    const group = new THREE.Group();\r\n    const extrudeSettings = { amount: radius+.5, bevelEnabled: false };\r\n    const rotationAmount = ((Math.PI * 2) / this.data.numArch);\r\n\r\n    for(var i = 0; i < this.data.numArch; i++){\r\n      var circleShape = new THREE.Shape()\r\n        .moveTo( 0, circleRadius )\r\n        .quadraticCurveTo( circleRadius, circleRadius, circleRadius, 0 )\r\n        .quadraticCurveTo( circleRadius, - circleRadius, 0, - circleRadius )\r\n        .quadraticCurveTo( - circleRadius, - circleRadius, - circleRadius, 0 )\r\n        .quadraticCurveTo( - circleRadius, circleRadius, 0, circleRadius );\r\n\r\n      var geometry = new THREE.ExtrudeGeometry( circleShape, extrudeSettings );\r\n      var mesh = new THREE.Mesh( geometry, defaultMaterial );\r\n\r\n      mesh.rotation.y = rotationAmount * i;\r\n      mesh.position.set(0, .01, 0);\r\n\r\n      if(i > 0){\r\n        var geometry = new THREE.TorusGeometry( ((radius/this.data.numArch) * i) + .5, 0.005, 8, 100);\r\n        var torus = new THREE.Mesh( geometry, defaultMaterial );\r\n        torus.rotation.x = Math.PI / 2;\r\n        torus.position.set(0, .01, 0);\r\n        group.add( torus );\r\n      }\r\n      group.add( mesh );\r\n\r\n    }\r\n    var geometry = new THREE.TorusGeometry( .6, 0.005, 8, this.data.numArch);\r\n    var torus = new THREE.Mesh( geometry, defaultMaterial );\r\n    torus.rotation.x = Math.PI / 2;\r\n    torus.position.set(0, 2.5, 0);\r\n    // group.add( torus );\r\n    this.el.setObject3D('mesh', group);\r\n  }\r\n});\r\nAFRAME.registerComponent('scale-on-mouseenter', {\r\n  schema: {\r\n    to: {default: {x: 2.5, y: 2.5, z:2.5}, type: 'vec3'}\r\n  },\r\n\r\n  init: function () {\r\n    var data = this.data;\r\n    var el = this.el;\r\n    this.el.addEventListener('click', function () {\r\n      el.object3D.scale.copy(data.to);\r\n    });\r\n  }\r\n});\r\nAFRAME.registerComponent('arch', {\r\n  schema: {\r\n    rotation: {type: 'number', default: 0},\r\n    cards: {type: 'array', default:[]}\r\n  },\r\n  init: function () {\r\n    var h = 2 + (.1 * Math.random());\r\n    const group2 = new THREE.Group();\r\n    const curve = new THREE.EllipseCurve(\r\n      0,  0,            // ax, aY\r\n      radius, radius,           // xRadius, yRadius\r\n      0,  Math.PI,  // aStartAngle, aEndAngle\r\n      false,            // aClockwise\r\n      Math.PI/2                // aRotation\r\n    );\r\n\r\n    var points = curve.getPoints( 250 );\r\n    var rootPoints = [];\r\n\r\n    for(var j = 0; j < 6; j++){\r\n      rootPoints.push([]);\r\n      var path = \"\";\r\n      for(var k = 0; k < points.length; k+=1){\r\n        var i = Math.floor(k);\r\n        if(i > 0){\r\n          path += \", \";\r\n        }\r\n\r\n        points[i].z = noise(i/20, j, (this.data.rotation*2)) + ((.1 * j) - (2.5 * .1)) + (Math.sin(((j*4*this.data.rotation) + i)/10)*.2);\r\n        // var x = points[i].x + noise(i/5, j, (this.data.rotation*2))/2\r\n        var x = points[i].x;\r\n\r\n        path += x  + \" \" + points[i].y + \" \" + points[i].z;\r\n        rootPoints[j].push({x: x, y:points[i].y , z: points[i].z});\r\n      }\r\n\r\n      var line = document.createElement('a-entity');\r\n      var sch = {lineWidth: 2, path: path, color: \"#331a00\", lineWidthStyler: \"1 - p + .5\"};\r\n\r\n      line.setAttribute('meshline',sch);\r\n      this.el.appendChild(line);\r\n\r\n    }\r\n    for(var i = 0; i < this.data.cards.length; i++){\r\n      // var randomPoint = points[Math.floor(Math.random() * 70) + 10];\r\n      var randomPoint = rootPoints[i%6][Math.floor((i/this.data.cards.length)*100) + 20];\r\n      var cardEl = document.createElement('a-entity');\r\n      var sch = {position: randomPoint, rotation: this.data.rotation, index: this.data.cards[i]};\r\n\r\n      cardEl.setAttribute('card', sch);\r\n      this.el.appendChild(cardEl);\r\n    }\r\n\r\n    this.el.setAttribute('geometry-merger', {preserveOriginal: false})\r\n    this.el.object3D.rotation.y = this.data.rotation;\r\n\r\n  },\r\n});\r\n","require('./entities.js')\r\nrequire('./search.js')\r\n\r\nvar inat_data = [\"species_guess\", \"place_guess\"]\r\nvar observations = [];\r\nvar basket = [];\r\n\r\nvar hideObservationCard = () => {$(\"#overlay-container\").animate({top:\"100vh\"});}\r\n\r\nvar displayObservationCard = (index) => {\r\n  $(\"#overlay-container\").animate({top:0});\r\n  basket.push(observations[index]);\r\n\r\n  for(var j = 0; j < inat_data.length; j++){\r\n    var tag = \"#\" + inat_data[j];\r\n    $(tag).html('');\r\n\r\n    if(inat_data[j] == \"photos\"){\r\n      for(var k = 0; k < observations[index][\"photos\"].length; k++){\r\n        $(tag).append('<img src=\"'+ observations[index][\"photos\"][k].url +'\"/>');\r\n      }\r\n    } else {\r\n      $(tag).html(observations[index][inat_data[j]]);\r\n    }\r\n  }\r\n}\r\n\r\nvar drawArches = () => {\r\n  var sceneEl = document.querySelector('a-scene');\r\n  var numArch = 10;\r\n  var rotationLvl = (Math.PI * 2) / numArch;\r\n\r\n  for(var i = 0; i < numArch; i++){\r\n    var d = [];\r\n    for(var j = i; j < observations.length; j += numArch){\r\n      d.push(j);\r\n    }\r\n    var schema = {rotation: rotationLvl * i, cards: d};\r\n    var entityEl = document.createElement('a-entity');\r\n\r\n    entityEl.setAttribute('arch', schema);\r\n    sceneEl.appendChild(entityEl);\r\n  }\r\n\r\n  var trelisEl = document.createElement('a-entity');\r\n  trelisEl.setAttribute('trelis', {numArch: 13});\r\n  sceneEl.appendChild(trelisEl);\r\n\r\n};\r\n\r\n\r\nfunction setup(){\r\n\r\n  $('#close,#overlay-container').on(\"click\", () => { hideObservationCard() })\r\n  $('#overlay').on(\"click\", (e) => { e.preventDefault(); return false; })\r\n  // sample data\r\n  // for(var k = 0; k < 500; k++){\r\n  //   observations.push({val: k});\r\n  // }\r\n\r\n  // real data\r\n  getData = airtableSearch();\r\n  getData.then(() => {\r\n    drawArches();\r\n    // shp(\"wwf_terr_ecos\").then(async (geojson) => {\r\n    //   // drawArches();\r\n    //   console.log(\"loaded\")\r\n    //   var turfPolygons = [];\r\n    //   for(var j = 0; j < observations.length; j++){\r\n    //     var pt = false;\r\n    //     if(observations[j].location){\r\n    //       pt = observations[j].location.split(\",\");\r\n    //       pt = [parseFloat(pt[0]), parseFloat(pt[1])]\r\n    //       pt = turf.point(pt);\r\n    //       console.log(pt)\r\n    //     } else if(observations[j].place_ids.length > 0){\r\n    //       // await new Promise( (resolve, reject) => {\r\n    //       //           var place = observations[j].place_ids[observations[j].place_ids.length-1];\r\n    //       //           console.log(place)\r\n    //       //           resolve();\r\n    //       //           // $.ajax({\r\n    //       //           //     url: \"https://api.inaturalist.org/v1/places/\" + place,\r\n    //       //           //     success: function(data) {\r\n    //       //           //       pt = data.results.location.split(\",\");\r\n    //       //           //       pt = [parseFloat(pt[0]), parseFloat(pt[1])]\r\n    //       //           //       pt = turf.point(pt);\r\n    //       //           //       resolve();\r\n    //       //           //     }\r\n    //       //           // });\r\n    //       //       });\r\n    //     }\r\n    //\r\n    //     if(pt){\r\n    //\r\n    //       for(var i = 0; i < geojson.features.length; i++){\r\n    //         if(!turfPolygons[i]){\r\n    //           turfPolygons.push(turf.polygon(geojson.features[i].geometry.coordinates[0]));\r\n    //         }\r\n    //         console.log(turfPolygons[i]);\r\n    //\r\n    //         var inside = turf.booleanPointInPolygon(pt, turfPolygons[i]);\r\n    //         if(inside){\r\n    //           console.log(observations[j].place_guess)\r\n    //           console.log(geojson.features[i].properties)\r\n    //           observations[j].bioregion = geojson.features[i].properties.ECO_NAME;\r\n    //         }\r\n    //\r\n    //       }\r\n    //     }\r\n    //   }\r\n    // });\r\n  });\r\n\r\n\r\n}\r\n\r\nsetup();\r\n","\nasync function search(){\n\n      var searchPromise = new Promise(async (resolve, reject) => {\n          $.ajax({\n              url: \"https://api.inaturalist.org/v1/observations?photos=true&project_id=97146&order=desc&order_by=created_at\",\n              success: function(data) {\n                observations = data.results;\n                console.log(data)\n                resolve();\n              }\n          });\n      });\n      return searchPromise;\n\n}\n\nasync function airtableSearch(){\n\n  var airtablePromise = new Promise((resolve, reject) => {\n    $.ajax({\n      url:\"https://api.airtable.com/v0/appIRHtaHUcrpPCvK/Observation?api_key=keyQSVeKTIgDnDvgT\",\n      success: function(data){\n        for(var i = 0; i < data.records.length; i++){\n          observations.push(data.records[i].fields);\n        }\n        resolve();\n      }\n    })\n  });\n  return airtablePromise;\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}